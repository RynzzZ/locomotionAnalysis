%% load file

file = 'C:\Users\Rick\Google Drive\columbia\Sawtell Lab Shared Drive\run.mat';
load(file);

% setup parameters
whEncoderSteps = 2880; % 720cpr * 4
wheelRad = 95.25; % mm
obEncoderSteps = 1000; % 250cpr * 4
obsRad = 96 / (2*pi); % radius of timing pulley driving belt of obstacles platform

%% test wheel decoder

[wheelPositions, wheelTimes] = rotaryDecoder(whEncodA.times, whEncodA.level,...
                                                     whEncodB.times, whEncodB.level,...
                                                     whEncoderSteps, wheelRad);


close all;
figure;
plot(wheelTimes, wheelPositions, 'linewidth', 3);
xlabel('time (s)')
ylabel('position (m)')
pimpFig;

%% test obstacle decoder (from rotary encoder)
[obsPositions, obsPositionTimes] = rotaryDecoder(obEncodA.times, obEncodA.level,...
                                                     obEncodB.times, obEncodB.level,...
                                                     obEncoderSteps, obsRad);

figure;
plot(obsPositionTimes, obsPositions, 'linewidth', 3);
xlabel('time (s)')
ylabel('position (m)')
pimpFig;


%% test motor decoder (commands sent to motor)

motorTimes = step.times;
motorPositions = motorDecoder(stepDir.level, stepDir.times, motorTimes);

figure;
plot(motorTimes, motorPositions, 'linewidth', 3);
xlabel('time (s)')
ylabel('position (m)')
pimpFig;

%% compute normalized wheel position

posNorm = positionRewardNormalize(wheelPositions, wheelTimes, reward.times);

close all;
figure;
plot(wheelTimes, posNorm, 'linewidth', 3);
xlabel('time (s)')
ylabel('position (m)')
pimpFig;

%% plot wheel, motor, and obstacle positions

obsTimes = obsOn.times;
obsTimes = obsTimes(logical(obsOn.level)); % only save inds where the obs is turning from off to on
motorPosNorm = motorPositions;

% offset motor and obstacle positions to match wheel position
for i=1:length(obsTimes)
    
    inds = motorTimes>obsTimes(i);
    wheelPos = posNorm(find(wheelTimes>obsTimes(i), 1, 'first'));
    motorPos = motorPosNorm(find(motorTimes>obsTimes(i), 1, 'first'));
    motorPosNorm(inds) = motorPosNorm(inds) - motorPos + wheelPos;
   
    
end

% plot
close all;
figure;
plot(wheelTimes, posNorm, 'linewidth', 3); hold on
scatter(motorTimes, motorPosNorm, 5);
xlabel('time (s)')
ylabel('position (m)')
pimpFig;





