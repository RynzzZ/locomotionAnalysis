% get col sums for many obstacle frames

% load data
session = '171023_002';
dataDir = 'C:\Users\Rick\Google Drive\columbia\obstacleData\sessions\';
vid = VideoReader([dataDir session '\runBot.mp4']);
load([dataDir session '\runAnalyzed.mat'], 'obsOnTimes', 'obsOffTimes',...
                                           'obsPositions', 'obsTimes',...
                                           'frameTimeStamps');
obsPositions = fixObsPositions(obsPositions, obsTimes, obsOnTimes);

% settings
frameEdges = [.336 .444];
statFrames = 100;

% initialization
numberOfFrames = vid.NumberOfFrames;
frameInds = 30700:30750;
obsPos = nan(1, numberOfFrames);
framesPerTrial = max(1, round(length(obsOnTimes) / statFrames)); % ensure at least one frame per trial
statFrames = framesPerTrial * length(obsOnTimes);





% !!! statistically determine pixel threshold
% for each obs trial, select n frames, compute col sums
% aplly k means to all sums and use highest mean as threshold for detecting object in column
%%

colSumsStats = nan(statFrames, vid.Width);

for i = 1:statFrames
    
    % select random trial and obs position
    trial = round(rand(1) * length(obsOnTimes));
    framePosit = rand(1) * diff(frameEdges) + min(frameEdges);
    
    % find frame index
    isInTrial = obsTimes>obsOnTimes(trial) & obsTimes<obsOffTimes(trial);              % binary vector of obsTimes that are in trial
    frameTime = obsTimes( find(isInTrial & obsPositions>=framePosit, 1, 'first') );    % time at which obstacle reaches position
    frameInd = find(frameTimeStamps>=frameTime, 1, 'first');                           % frame index at which obstacles reaches position
    
    % get frame
    frame = rgb2gray(read(vid, frameInd));
    colSumsStats(i,:) = sum(frame,1) / size(frame,1);
    disp(i)
    
end


colSumsStats = colSumsStats(:);
guesses = kmeans(colSumsStats, 2);
pixThresh = mean(colSumsStats(guesses==2));

%% !!! find obstacles
% go through all frames in obsOn epochs, getting column sums and thresholding
% eliminate non-adjacent colums
% get mean of remaining columns

figure; 

% colSums = nan(vid.NumberOfFrames, vid.Width);
obsPosits = nan(1,length(frameTimeStamps));

for i = 1:length(obsOnTimes)

    frameInds = find(frameTimeStamps>obsOnTimes(i) & frameTimeStamps<obsOffTimes(i));

    for j = 1:length(frameInds)
        
        frame = rgb2gray(read(vid, frameInds(j)));
        
        colSum = sum(frame,1) / size(frame,1);
        colSum = colSum > pixThresh;
        inds = find(colSum);
        
        obsPosits(frameInds(j)) = median(inds);
        
        
        
    end
    disp(i);
end




%% verification
% ???


%% plot
% prepare figure
close all; figure;

hist(colSumsStats(:), size(frame,2)/2)

pimpFig;




