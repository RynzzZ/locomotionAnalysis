function trainSVM(className)
    
% user settings
dataDir = 'C:\Users\rick\Google Drive\columbia\obstacleData\svm\';
categories = {'positive', 'negative'};

% initializations
labels = [];


% iterate through image categories
for i = 1:length(categories)

    % get list of files in category folder
    category = cell2mat(categories(i));
    files = dir([dataDir 'trainingImages\' className '\' category]);
    files = {files.name};
    files = files(3:end);

    % get training examples
    for j = 1:length(files)

        load([dataDir 'trainingImages\' className '\' category '\' files{j}], 'img')

        % initialize storage variable on first pass
        if ~exist('features', 'var')
            features = nan(0, numel(img));
        end
        
        % extract and save features
        img = getFeatures(img);
        features(end+1,:) = img(:);

    end
    
    % store category labels
    labels = vertcat(labels, ones(length(files),1)*(i));
end


% train classifer
% model = svmtrain(labels, features, '-t 0 -s svm_type 2');
% model.w = model.sv_coef' * model.SVs;

keyboard
%%
tic
rng(1); % for reproducibility initialize random seed
modelRaw = fitcsvm(features, labels, 'KernelFunction', 'linear', 'OptimizeHyperparameters',  {'BoxConstraint', 'KernelScale'})
% modelRaw = fitcsvm(features, labels, 'KernelFunction', 'polynomial', 'OptimizeHyperparameters',  {'BoxConstraint', 'KernelScale', 'PolynomialOrder'})
% modelRaw = fitcsvm(features, labels, 'KernelFunction', 'gaussian', 'OptimizeHyperparameters',  {'BoxConstraint', 'KernelScale'})
toc
% modelCrossVal = crossval(modelRaw);
% model.classLoss = kfoldLoss(modelCrossVal);
% fprintf('generalization loss: %f', model.classLoss);
%%

subHgt = size(img,1);
subWid = size(img,2);
uisave ({'model', 'subHgt', 'subWid'}, [dataDir 'classifiers\' className '.mat']);



